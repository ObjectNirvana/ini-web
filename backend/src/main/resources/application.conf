akka{
  #loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

systems {

    icapserver {
    	port = 1344
        numContentWorkersForNode = 4
        couchdbHost = "127.0.0.1"
        couchdbPort = 5984
        geoipdb = "GeoLite2-City.mmdb"
        maxBodySize = 262144000
        activityCollector = true
        captureBytes = false
        sharefinder.repeat = 5

	      default-dispatcher {
	      #my-thread-pool-dispatcher {
	      	# Dispatcher is the name of the event-based dispatcher
	      	type = Dispatcher
	      	# What kind of ExecutionService to use
	      	executor = "thread-pool-executor"
	      	# Configuration for the thread pool
	      	thread-pool-executor {
	      		name = "my thread pool"
	        	# minimum number of threads to cap factor-based core number to
	        	core-pool-size-min = 20
	        	# No of core threads ... ceil(available processors * factor)
	        	#core-pool-size-factor = 20.0
	        	# maximum number of threads to cap factor-based number to
	        	core-pool-size-max = 153
	      	}
	      	# Throughput defines the maximum number of messages to be
	      	# processed per actor before the thread jumps to the next actor.
	      	# Set to 1 for as fair as possible.
	      	throughput = 10
	      }
        actor {
          	provider = "akka.actor.LocalActorRefProvider"
		    deployment {
		      /"*" {
		        #dispatcher = my-thread-pool-dispatcher
		        dispatcher = default-dispatcher
		      }
		    }
		    info.receive = on
		    debug {
		    	autoreceive = on
		    	lifecycle = on
		    	receive = on
		    	event-stream = on
		    }
        }
 
        akka {
		    #loggers = ["akka.event.slf4j.Slf4jLogger"]
            loglevel = DEBUG
			logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
            actor {
	            provider = "akka.actor.LocalActorRefProvider"
			    debug.receive = on
			    deployment {
			      /"*" {
			        #dispatcher = my-thread-pool-dispatcher
			        dispatcher = default-dispatcher
			      }
			    }
	        }

            scheduler.tick-duration = 33ms
        }
    }

    backend {
      system-name = "Backend"
      processorMultiplier = 32

      #Cluster specific dispatcher -- need to tune
      x-default-dispatcher {
      	name = "actor pool"
        type = "Dispatcher"
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 20
          parallelism-factor = 10.0
          parallelism-max = 110
        }
      }

      default-dispatcher {
      #my-thread-pool-dispatcher {
      	# Dispatcher is the name of the event-based dispatcher
      	type = Dispatcher
      	# What kind of ExecutionService to use
      	executor = "thread-pool-executor"
      	# Configuration for the thread pool
      	thread-pool-executor {
      		name = "my thread pool"
        	# minimum number of threads to cap factor-based core number to
        	core-pool-size-min = 20
        	# No of core threads ... ceil(available processors * factor)
        	#core-pool-size-factor = 20.0
        	# maximum number of threads to cap factor-based number to
        	core-pool-size-max = 301
      	}
      	# Throughput defines the maximum number of messages to be
      	# processed per actor before the thread jumps to the next actor.
      	# Set to 1 for as fair as possible.
      	throughput = 10
      }

      akka {
	    #loggers = ["akka.event.slf4j.Slf4jLogger"]
        jvm-exit-on-fatal-error = off
        loglevel = INFO
		logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
        extensions = ["akka.cluster.pubsub.DistributedPubSub"]
        #			  "akka.cluster.metrics.ClusterMetricsExtension"]

        contrib.cluster {
          pub-sub {

            # Actor name of the mediator actor, /user/jobPubSubMediator
            name = distributedPubSubMediator

            # Start the mediator on members tagged with this role.
            # All members are used if undefined or empty.
            role = "jobDocket"

            # How often the DistributedPubSubMediator should send out gossip information
            gossip-interval = 10s

            # Removed entries are pruned after this duration
            removed-time-to-live = 120s
          }
        }

        scheduler.tick-duration = 33ms

        actor {
          	provider = "akka.cluster.ClusterActorRefProvider"
          	# provider = "akka.actor.LocalActorRefProvider"
		    deployment {
		      /"*" {
		        #dispatcher = my-thread-pool-dispatcher
		        dispatcher = default-dispatcher
		      }
		    }
        }

        cluster {
          # seed-nodes = ["akka.tcp://ClusterSystem@192.168.40.40:2551", "akka.tcp://ClusterSystem@192.168.40.40:2552"]
          seed-nodes = ["akka.tcp://ClusterSystem@localhost:2551", "akka.tcp://ClusterSystem@localhost:2552"]

          roles = []
          metrics.collector-class = akka.cluster.JmxMetricsCollector
          min-nr-of-members = 2

          auto-down = on

          #use-dispatcher = cluster-dispatcher
          use-dispatcher = default-dispatcher

          # increase acceptable delay to 4 min, as a 2G file may slow the response to 1-2 mins.
          failure-detector {
            threshold = 20
            acceptable-heartbeat-pause = 900s
          }
        }

        remote {
          transport = "akka.remote.netty.NettyRemoteTransport"
          log-remote-lifecycle-events = off
          netty.tcp {
            #hostname = "192.168.40.57"
            hostname = "localhost"
            port = 0

            maximum-frame-size = 2097152
            send-buffer-size = 52428800
            receive-buffer-size = 52428800
          }
        }
      }
    }
}
